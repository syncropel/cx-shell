name: Build and Release CX Shell

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e .[all]

      - name: Run Pytest
        run: |
          source .venv/bin/activate
          python -m pytest

  build-linux:
    name: Build PEX Executable for Linux
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install PEX and build dependencies
        run: |
          pip install pex uv
          uv venv .pex-venv
          source .pex-venv/bin/activate
          uv pip install -e .[all]

      - name: Build PEX executable
        run: |
          source .pex-venv/bin/activate
          # Build the PEX file directly with the name 'cx' for simplicity
          pex .[all] -o dist/cx -c cx --no-strip-pex-env

      - name: Smoke Test the built PEX binary
        run: |
          echo "--- Verifying PEX binary was created ---"
          ls -l dist/cx
          chmod +x dist/cx

          echo "--- Running smoke test on runner ---"
          # PEX is portable, so we can test it directly on the runner's Python
          ./dist/cx --version
          echo "--- Smoke test PASSED ---"

      - name: Prepare and Archive Linux Executable
        id: prepare_artifact
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          ARCHIVE_NAME="cx-${VERSION}-linux-x86_64.tar.gz"

          # Archive the single 'cx' PEX executable
          tar -czvf "${ARCHIVE_NAME}" -C dist cx

          echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload Linux artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build-linux
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-assets/**/*

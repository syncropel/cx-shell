name: Build and Release CX Shell

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install uv
        run: pip install uv
      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-
      - name: Create virtual environment
        run: uv venv
      - name: Install all dependencies for testing
        run: uv pip install -e .[all]
      - name: Run Pytest
        run: uv run pytest

  build:
    name: Build Executable on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install System Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install unixodbc

      - name: Install uv
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # --- START OF DEFINITIVE, FINAL FIX ---
      - name: Install Dependencies and Build (macOS & Windows)
        if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
        run: |
          uv venv
          uv pip install -e .[all]
          # Use the official method to install browsers into site-packages
          PLAYWRIGHT_BROWSERS_PATH=0 uv run playwright install --with-deps chromium
          uv run pyinstaller cx.spec

      - name: Build for Linux using Docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run --rm \
            -v "$(pwd)":/work -w /work \
            python:3.12-slim-bullseye \
            bash -c " \
              apt-get update && \
              apt-get install -y --no-install-recommends \
                git binutils unixodbc unixodbc-dev \
              && \
              pip install uv && \
              uv venv && \
              uv pip install -e .[all] && \
              PLAYWRIGHT_BROWSERS_PATH=0 uv run playwright install --with-deps chromium && \
              uv run pyinstaller cx.spec \
            "
      # --- END OF DEFINITIVE, FINAL FIX ---
      - name: Prepare and Archive Executable
        id: prepare_artifact
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          OS_NAME=$(echo ${{ matrix.os }} | tr '[:upper:]' '[:lower:]' | sed 's/-latest//')

          if [ "${{ runner.os }}" == "Windows" ]; then
            EXECUTABLE_PATH="dist/cx.exe"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-amd64.zip"
            powershell -Command "Compress-Archive -Path '${EXECUTABLE_PATH}' -DestinationPath '${ARCHIVE_NAME}'"
          else
            EXECUTABLE_PATH="dist/cx"
            ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-x86_64.tar.gz"
            tar -czvf ${ARCHIVE_NAME} -C dist cx
          fi

          echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-assets/**/*

name: Build and Release CX Shell

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e .[all]

      - name: Run Pytest
        run: |
          source .venv/bin/activate
          python -m pytest

  build-linux:
    name: Build Executable for Linux
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build portable Linux binary using Docker
        run: |
          docker run --rm \
            -v "$(pwd)":/work -w /work \
            python:3.12-slim-bullseye \
            bash -c " \
              apt-get update && \
              apt-get install -y --no-install-recommends \
                git binutils unixodbc unixodbc-dev \
              && \
              pip install uv && \
              uv venv && \
              uv pip install -e .[all] && \
              PLAYWRIGHT_BROWSERS_PATH=0 uv run playwright install --with-deps chromium && \
              uv run pyinstaller cx.spec \
            "

      - name: Smoke Test the built binary
        run: |
          echo "--- Verifying binary was created ---"
          ls -l dist/cx

          echo "--- Running smoke test inside a clean container ---"
          # We run the test in a fresh, minimal container to simulate a real-world environment.
          # We mount the 'dist' directory containing our new binary.
          docker run --rm \
            -v "$(pwd)/dist:/app" \
            python:3.12-slim-bullseye \
            bash -c " \
              echo '--- Inside container: Testing binary ---' && \
              /app/cx --version && \
              echo '--- Smoke test PASSED ---' \
            "

      - name: Prepare and Archive Linux Executable
        id: prepare_artifact
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          ARCHIVE_NAME="cx-${VERSION}-linux-x86_64.tar.gz"
          echo "Archiving dist/cx to ${ARCHIVE_NAME}..."
          tar -czvf "${ARCHIVE_NAME}" -C dist cx
          echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload Linux artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build-linux
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-assets/**/*

name: Build and Release CX Shell

on:
  push:
    tags:
      - "v*"

jobs:
  test:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          uv pip install -e .[all]

      - name: Run Pytest
        run: |
          source .venv/bin/activate
          python -m pytest

  build:
    name: Build Executable on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        # Currently focused on Linux. To re-enable, add 'macos-latest' and 'windows-latest'.
        os: [ubuntu-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        if: matrix.os != 'ubuntu-latest' # Caching is not used in the Docker step
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      # --- Platform-Specific Build Steps ---

      - name: Build for Linux using Docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run --rm \
            -v "$(pwd)":/work -w /work \
            python:3.12-slim-bullseye \
            bash -c " \
              apt-get update && \
              apt-get install -y --no-install-recommends \
                git binutils unixodbc unixodbc-dev \
              && \
              pip install uv && \
              uv venv && \
              uv pip install -e .[all] && \
              PLAYWRIGHT_BROWSERS_PATH=0 uv run playwright install --with-deps chromium && \
              uv run pyinstaller cx.spec \
            "

      - name: Build for macOS / Windows
        if: matrix.os == 'macos-latest' || matrix.os == 'windows-latest'
        shell: bash
        run: |
          # Install dependencies needed on specific runners
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install unixodbc
          fi

          # Set up Python and uv (setup-python is needed here)
          pip install uv

          # Install project dependencies
          uv venv
          uv pip install -e .[all]

          # Install Playwright browsers and build the executable
          PLAYWRIGHT_BROWSERS_PATH=0 uv run playwright install --with-deps chromium
          uv run pyinstaller cx.spec

      # --- Artifact Preparation (Platform-Agnostic) ---

      - name: Prepare and Archive Executable
        id: prepare_artifact
        shell: bash # Use bash on all runners for consistent scripting
        run: |
          VERSION=${{ github.ref_name }}
          OS_LOWER=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')

          case "$OS_LOWER" in
            windows*)
              OS_NAME="windows"
              ARCH="amd64"
              EXT=".zip"
              EXECUTABLE_PATH="dist/cx.exe"
              ;;
            macos*)
              OS_NAME="macos"
              ARCH="x86_64"
              EXT=".tar.gz"
              EXECUTABLE_PATH="dist/cx"
              ;;
            *)
              OS_NAME="linux"
              ARCH="x86_64"
              EXT=".tar.gz"
              EXECUTABLE_PATH="dist/cx"
              ;;
          esac

          ARCHIVE_NAME="cx-${VERSION}-${OS_NAME}-${ARCH}${EXT}"

          echo "Archiving ${EXECUTABLE_PATH} to ${ARCHIVE_NAME}..."

          if [[ "$EXT" == ".zip" ]]; then
            powershell -Command "Compress-Archive -Path '${EXECUTABLE_PATH}' -DestinationPath '${ARCHIVE_NAME}'"
          else
            tar -czvf "${ARCHIVE_NAME}" -C dist cx
          fi

          echo "ASSET_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Upload artifact for release job
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET_NAME }}
          path: ${{ env.ASSET_PATH }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all built artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-assets/**/*
